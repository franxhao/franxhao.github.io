<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>双线部署 Coding Pages 和 GitHub Pages 并实现全站 HPPTS</title>
    <url>/undefined/f82c66a5.html</url>
    <content><![CDATA[<p>以前我的静态站是双线部署在Github Page 和 Gitee Page 上的，域名是指向Github上的所以每次访问我的静态站速度都很头疼，Gitee Page 服务每次都需要手动更新部署，而且部署速度有时也挺慢的，所以前段时间是想渐渐退出静态站的，直到后来我发现了 Coding Page 可以免费自动更新部署，而且在国内的访问速度也非常可观，让我重新燃起继续完善静态站的想法！</p>
<p>Coding Page 服务还可以绑定自己的域名（包括国外服务商购买的域名），这服务这么香，赶紧搞起来吧 o(*≧▽≦)ツ ～</p>
<a id="more"></a>

<h2 id="创建Coding项目"><a href="#创建Coding项目" class="headerlink" title="创建Coding项目"></a>创建Coding项目</h2><p>1、创建一个Coding的账号。现在的Coding是以团队的方式加入，身边没有Coding团队的小伙伴可以自己创建一个团队，身边有人有团队的话可以申请加入，这样就可以省去创建团队的功夫啦。</p>
<p>2、账号创建好后，找到 <strong>个人账户设置</strong> ，将本地生成的SSH公钥添加进去。（同Github上的设置）一般公钥路径在 <code>C:\Users\用户名\.ssh</code> 目录下的 <code>id_rsa.pub</code> 文件里，用记事本打开，将所有内容复制出来即可。</p>
<p>3、<strong>实名认证。</strong> 必须实名认证才可以设置部署静态网站。</p>
<p>4、创建一个托管静态页面的项目</p>
<ul>
<li><p>选择代码托管项目（或选择DevOps项目）</p>
<img src="https://pic.downk.cc/item/5f4a03a9160a154a67001905.png" style="zoom: 55%;">
</li>
<li><p>项目名称建议是使用自己在Coding上设置的用户名</p>
</li>
<li><p>进入刚创建的仓库，复制SSH的路径（据说SSH比较稳定）</p>
</li>
</ul>
<h2 id="配置到Hexo并部署到Coding"><a href="#配置到Hexo并部署到Coding" class="headerlink" title="配置到Hexo并部署到Coding"></a>配置到Hexo并部署到Coding</h2><p>1、配置主站目录下的 <code>_config.yml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: (自己的SSH)</span><br><span class="line">    coding: (自己的SSH)</span><br><span class="line">    #gitee: (自己的SSH)</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>2、执行三件套指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure>

<p>3、部署到Coding</p>
<ul>
<li><p>打开持续部署开关</p>
<img src="https://pic.downk.cc/item/5f4a076c160a154a6701391a.png" style="zoom: 50%">
</li>
<li><p>部署静态网站</p>
<img src="https://pic.downk.cc/item/5f4a08d0160a154a67019f6a.png">

</li>
</ul>
<p>部署完成后点开上面的访问地址可以打开你的Hexo博客说明已经部署成功啦</p>
<h2 id="添加自定义域名"><a href="#添加自定义域名" class="headerlink" title="添加自定义域名"></a>添加自定义域名</h2><p>首先需要拥有一个域名，国内购买的域名需要进行备案，国外域名商购买的域名可以不进行备案</p>
<p>本站域名是在国外域名平台 Namesilo 购买，是目前价格较便宜的域名平台，支持支付宝，提供免费的域名隐私保护，性价比较高。</p>
<blockquote>
<p>关于Namesilo域名购买可以查找度娘或者看以下这篇文章：</p>
<p><a href="https://tding.top/archives/b48e2719.html" target="_blank" rel="noopener">https://tding.top/archives/b48e2719.html</a></p>
</blockquote>
<p>域名解析我使用的是DNSPod</p>
<h3 id="添加解析记录"><a href="#添加解析记录" class="headerlink" title="添加解析记录"></a>添加解析记录</h3><p>1、ping一下Coding给你Hexo项目部署到的地址，获得Coding Page 的IP地址</p>
<p>2、在DNSPod中添加两条解析记录：</p>
<ul>
<li>记录类型为 <code>A</code> ，主机记录为 <code>@</code> ，解析线路选择默认，记录值为ping到的Coding Page的IP地址</li>
<li>记录类型为 <code>CNAME</code> ，主机记录为 <code>www</code> ，解析线路选择默认，记录值为Coding给你Hexo项目部署到的地址，例如我的是<code>https://f4kp1l.coding-pages.com</code> </li>
</ul>
<p>3、将Github的解析线路选择国外，这样就可以确保国内访问都是走Coding这边</p>
<p>具体如下图：</p>
<img src="https://pic.downk.cc/item/5f4a0db2160a154a67036573.png">

<h3 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h3><p>在Coding的项目中，找到 <code>持续部署→静态网站→设置</code> ，拉到下面的自定义域名，绑定新域名</p>
<img src="https://pic.downk.cc/item/5f4a0edf160a154a6703d6c8.png">

<div class="note warning">
            <p>Tips：注意：一定要选首选的域名，并且<strong>非首选域名要勾选跳转至首选域名</strong> </p>
          </div>

<h3 id="开启HTTPS"><a href="#开启HTTPS" class="headerlink" title="开启HTTPS"></a>开启HTTPS</h3><p>打开强制HTTPS开关会自动申请证书，如果你之前已经部署到了 GitHub Pages 并开启了 HTTPS，那么直接在设置页面绑定你自己的域名，SSL/TLS 安全证书就会显示申请错误。</p>
<p>申请错误原因是：在验证域名所有权时会定位到 Github Pages 的主机上导致 SSL 证书申请失败。</p>
<p><strong>正确的做法是：先去域名 DNS 把 GitHub 的解析暂停掉，然后再重新申请 SSL 证书，大约十秒左右就能申请成功，然后开启强制 HTTPS 访问</strong>。</p>
<div class="note default">
            <h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://tding.top/archives/e09249d2.html" target="_blank" rel="noopener">Hexo 博客部署到 Coding</a></p><h3 id="动态站文章地址"><a href="#动态站文章地址" class="headerlink" title="动态站文章地址"></a>动态站文章地址</h3><p><a href="https://haozsky.top/archives/14/" target="_blank" rel="noopener">https://haozsky.top/archives/14/</a><br>欢迎光临我的<a href="https://haozsky.top" target="_blank" rel="noopener">动态站</a></p>
          </div>]]></content>
      <categories>
        <category>博客</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>新技能加点！从0开始搭建Hexo博客（一）</title>
    <url>/undefined/80342cee.html</url>
    <content><![CDATA[<img src="https://pic1.zhimg.com/v2-0d8684079db9ede92ed46ef40b69a1e6_1200x500.jpg" style="zoom:67%;">



<a id="more"></a>

<hr>
<h4 id="特别感谢以下UP主的教学视频："><a href="#特别感谢以下UP主的教学视频：" class="headerlink" title="特别感谢以下UP主的教学视频："></a>特别感谢以下UP主的教学视频：</h4><p><strong><font size="4">①<a href="https://space.bilibili.com/384068749/" target="_blank" rel="noopener">CodeSheep</a>:</font></strong></p>
<p>传送门：<a href="https://www.bilibili.com/video/BV1Yb411a7ty" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Yb411a7ty</a></p>
<p><strong><font size="4">②<a href="https://space.bilibili.com/100518197/" target="_blank" rel="noopener">Master_lisa</a>:</font></strong></p>
<p>传送门：<a href="https://www.bilibili.com/video/BV1A4411G7SF" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1A4411G7SF</a></p>
<hr>
<p><strong>前情提要：</strong>我的搭建系统是windows 10，流程根据UP主Master_lisa的视频来写。OK,Here we go！</p>
<h2 id="1-提前准备"><a href="#1-提前准备" class="headerlink" title="1.提前准备"></a>1.提前准备</h2><ul>
<li><p><strong>创建Github/Gitee(码云)：</strong></p>
<p>用户名都是最好用小写字母，可以加数字。创建好后点击网页右上角+号创建新库，如下图：</p>
<p><img src="https://pic.downk.cc/item/5f3a9e2a14195aa594b22af7.png" alt></p>
<p>新建库时应严格按照①中用户名，以这种<code>xxx.github.io</code>形式(②)输入：<img src="https://pic.downk.cc/item/5f3a9e4b14195aa594b2315a.png" alt></p>
<p>输入完毕后点击下方绿色按钮<strong>Create repository</strong>就完成建库啦。</p>
</li>
<li><p><strong>安装 <a href="https://nodejs.org" target="_blank" rel="noopener">Node.js</a>：</strong><code>https://nodejs.org</code></p>
<p><img src="https://pic.downk.cc/item/5f3a9e6414195aa594b23695.png" alt></p>
<p>安装步骤很简单，一直next，默认安装就行。</p>
</li>
<li><p><strong>安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>：</strong><code>https://git-scm.com/downloads</code></p>
<p><img src="https://pic.downk.cc/item/5f3a9e7614195aa594b23b43.png" alt></p>
<p><img src="https://pic.downk.cc/item/5f3a9e8614195aa594b23f16.png" alt></p>
<p>安装步骤也是一直点下一步，按官方默认的来装就行。（路径可选）</p>
<blockquote>
<p>tips：Git安装完成后，发现右键有Git的功能快捷键，我们主要用Git Bash。</p>
</blockquote>
</li>
</ul>
<h2 id="2-配置Git"><a href="#2-配置Git" class="headerlink" title="2.配置Git"></a>2.配置Git</h2><p>在Git安装目录下右键点击<code>Git Bash Here</code>，在终端窗口配置好你的用户名和邮箱：</p>
<blockquote>
<p><code>$ git config --global user.name &quot;John Doe&quot;</code>（“John Doe”为你要输入的用户名）</p>
<p><code>$ git config --global user.email &quot;johndoe@example.com&quot;</code>（email后填你的邮箱）</p>
</blockquote>
<p>配置好后可以输入以下检查是否配置成功，如果输出结果是你输入的东西就是配置成功了：</p>
<blockquote>
<p><code>$ git config --global user.name</code></p>
<p><code>$ git config --global user.email</code></p>
</blockquote>
<p>tips：以上只需复制$符号之后的代码即可；在Git中复制粘贴不能使用ctrl+c/v，只能老老实实用鼠标。</p>
<h2 id="3-配置SSH"><a href="#3-配置SSH" class="headerlink" title="3.配置SSH"></a>3.配置SSH</h2><ul>
<li><p>继续在终端窗口输入：<code>ssh-keygen -t rsa -C &quot;johndoe@example.com&quot;</code>，在接下来全部按回车键，出现选项选y然后继续回车。出现下图样式说明成功：</p>
<p><img src="https://pic.downk.cc/item/5f3a9e9814195aa594b243a9.png" alt></p>
<p>这时可以按配置里说的public key的地址去找到自己的ssh公钥。一般在<code>C:\Users\Admin</code>中出现<code>.ssh</code>文件夹，右击该文件夹里的<code>id_rsa.pub</code>以记事本形式打开，里面就是你的SSH公钥。</p>
</li>
<li><p>将SSH配置到Github上。在Github上点击<strong>头像</strong>，找到<strong>Settings</strong>点击进入，找到左栏的<strong>SSH and GPG keys</strong>。然后点击<strong>New SSH key</strong>。</p>
<p><img src="https://pic.downk.cc/item/5f3a9eaf14195aa594b24a55.png" alt></p>
</li>
<li><p>输入以下检验是否配置成功：</p>
<blockquote>
<p><code>$ ssh git@github.com</code></p>
<p><code>$ ssh -T git@github.com</code></p>
</blockquote>
<p>若都出现<strong>You’ve successfully authenticated</strong>字样就是配置成功了。</p>
</li>
</ul>
<hr>
<p><strong>←To Be Continued</strong></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>进阶之路！从0开始搭建Hexo博客（二）</title>
    <url>/undefined/91ba00fe.html</url>
    <content><![CDATA[<img src="https://1on1.today/blog/wp-content/uploads/2019/03/blog.jpg" style="zoom: 67%;">

<a id="more"></a>



<h1 id="1-Hexo安装"><a href="#1-Hexo安装" class="headerlink" title="1.Hexo安装"></a>1.Hexo安装</h1><p>接上一篇</p>
<ul>
<li><p>在Git中输入<code>npm -v</code>和<code>node -v</code>，若出现版本号说明node安装成功。输入<code>npm install hexo-cli -g</code>安装Hexo，安装完成后即可退出Git。</p>
</li>
<li><p>在任意磁盘中新建一个文件夹来放配置文件，比如在D盘中新建了一个文件夹命名为“Myblog”；打开你的文件夹，然后在空白处点鼠标的右键，选择<code>Git Bash Here</code>；在Git中输入命令<code>hexo init</code>安装相关配置。</p>
<p>等待安装完毕后，最后一句出现 <strong>INFO Start blogging with hexo</strong> 说明Hexo已经搭建成功了。</p>
</li>
<li><p>搭建完成后可输入命令 <code>npm install</code> 和 <code>npm install hexo-deployer-git --save</code> 方便今后部署。</p>
</li>
</ul>
<h1 id="2-运行测试"><a href="#2-运行测试" class="headerlink" title="2.运行测试"></a>2.运行测试</h1><p>首先介绍一下今后写博客时会经常用到的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean  #用来清理缓存文件</span><br><span class="line">hexo s      #运行本地服务器</span><br><span class="line">hexo g      #生成静态文件</span><br><span class="line">hexo d      #上传到服务器</span><br></pre></td></tr></table></figure>

<p>博客搭建成功后，输入命令 <code>hexo s</code> (hexo server) 运行本地服务器</p>
<img src="https://pic.downk.cc/item/5f3aa12a14195aa594b2e384.png" style="zoom: 80%;">

<p>打开浏览器，输入<code>localhost:4000</code>，看到以下页面说明<strong>本地环境搭建完成</strong></p>
<img src="https://pic.downk.cc/item/5f3ab11014195aa594b6cf97.png" style="zoom: 60%;">



<h1 id="3-部署到云端"><a href="#3-部署到云端" class="headerlink" title="3.部署到云端"></a>3.部署到云端</h1><p>将博客部署到远端后别人才可以访问到你的网站，这里以GitHub为例。</p>
<ul>
<li><p>首先在你所建立的blog文件夹根目录下找到<strong>_config.yml</strong>也就是<strong>站点配置文件</strong>，用编辑器打开文件。打开后拉到最下面找到<strong>deploy</strong>，做以下修改：</p>
<img src="https://pic.downk.cc/item/5f3ab1d214195aa594b6fa78.png" style="zoom:80%;">

<p>地址我使用的是SSH的地址，修改完成后保存配置文件。</p>
</li>
<li><p>在Git命令输入框中输入命令<code>hexo g</code>（hexo generate）在本地生成静态文件。再次输入<code>hexo s</code>可预览是否有问题，没有问题后按<strong>Ctrl+C</strong>退出预览，输入<code>hexo d</code>就可以上传至GitHub云端啦。</p>
</li>
</ul>
<p>当然，今后写博客想要一步到位的话也可以使用一键三杀：</p>
<blockquote>
<p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p>
<p>或 <code>hexo clean &amp;&amp; hexo g -d</code></p>
</blockquote>
<h1 id="4-更换主题"><a href="#4-更换主题" class="headerlink" title="4.更换主题"></a>4.更换主题</h1><p>Hexo的主题可以在官网的<a href="https://hexo.io/themes/" target="_blank" rel="noopener"><strong>主题</strong></a>里找到自己喜欢的主题，点击主题名可以进入到主题的GitHub地址，里面会有相关主题的安装和配置说明等。</p>
<p>主题安装完成后需要在<strong>博客的站点配置文件</strong>中找到<strong>theme:</strong>，并将其原来的landscape主题改成自己下载的主题的名字，主题名为<strong>themes文件目录</strong>中的主题文件名</p>
<img src="https://pic.downk.cc/item/5f3ab23414195aa594b70eec.png" style="zoom:70%;">

<p>这里以我用的next主题为例</p>
<p>主题更换好后再来一次<code>hexo s</code>就能预览到自己更换的主题啦。关于主题的美化大家可以自己去研究，网上关于Hexo的文章有很多，出现问题一般都比较容易找到。关于next主题美化这里推荐以下参考视频：</p>
<blockquote>
<p>UP主<a href="https://space.bilibili.com/386767453/" target="_blank" rel="noopener"><strong>dp2px_com:</strong></a></p>
<p><a href="https://www.bilibili.com/video/BV1VE411k7jP" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1VE411k7jP</a></p>
<p><a href="https://www.bilibili.com/video/BV1LE411k7SR" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1LE411k7SR</a></p>
</blockquote>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p><strong>“从0开始搭建Hexo博客”系列</strong>到这里就完结了，因为搭建过程需要更直观的表达会更好些，文字工程量其实是挺大的，所以该文章主要是基于UP主的视频所写，有不懂的地方可以去看视频，里面的操作会更直观。</p>
<p>tips：</p>
<ol>
<li><p>配置文件中，冒号后（如theme:）必须要空一格才能输入东西。主题文件中也有配置文件，和站点的配置文件名字相同但是用途不同，需要注意分清楚。</p>
</li>
<li><p>关于部署方面其实有很多选择，除GitHub外，类似的还有Gitee和Coding，GitHub主要是国外的所以可能会导致别人的访问速度方面的体验跟不上，当然像Gitee等国内的Page服务体验也会有所不同。</p>
</li>
<li><p>关于主题方面大家可以自己慢慢探索，美化主题不是一天就能完成的事，就像记单词一样，一点一点地发现和积累，最终就可以美化成为你所希望的主题。</p>
</li>
</ol>
<p>最后祝大家能够做出属于自己的博客</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo发布文章报错can not read a block mapping entry</title>
    <url>/undefined/6df7f115.html</url>
    <content><![CDATA[<p>今天在修改文章标题的时候报错了，我直接改标题没有动到下面的信息（冒号后都已空一格），但是在生成静态的时候给我反馈了如下错误：</p>
<blockquote>
<p><code>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 2, column 4:</code></p>
</blockquote>
<p>经过Google查找发现是标题配置里面有<code>&quot; &quot;</code>和<code>( )</code>这类英文符号，导致文章无法按照正确YAML语法解析而出错，把它们改成中文符号就好了。</p>
<p>通过此次踩坑发现，文章头部配置要严格按照YAML语法来写。</p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>踩坑记录</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Typecho主站崩溃与自建RSSHub和跨域服务</title>
    <url>/undefined/2dcf1105.html</url>
    <content><![CDATA[<img src="https://pic.downk.cc/item/5f3ea93814195aa594522d61.png">



<p>前几天发现我的动态主站崩溃了（2020.8.12），通过域名打开直接出现的是PHP源码，一番折腾后虽然能进主页了，但是所有子页面都无法打开，网页显示 <code>404 Not Found nginx</code> ，苦于我这嵌入式方向专业的童鞋没有前端基础折腾了好久没办法修复，只能删库重建网站了。更痛心的是数据库也因保存错误数据导致数据无法恢复了……我的头发白掉了啊(ㄒoㄒ)</p>
<p>经过和重建网站的Nginx配置对比，为什么出问题自己心里算是有些眉目了，两份Nginx配置内容有很大差别，说明是在某个时候这份配置被覆盖了，为什么会被覆盖？将在文章RSSHub和跨域服务搭建过程中说明……</p>
<a id="more"></a>

<hr>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p><strong>RSSHub：万物皆可 RSS</strong></p>
<p>RSSHub 是一个开源、简单易用、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源。RSSHub 借助于开源社区的力量快速发展中，目前已适配数百家网站的上千项内容。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>

<h2 id="1-利用宝塔PM2搭建RSSHub"><a href="#1-利用宝塔PM2搭建RSSHub" class="headerlink" title="1.利用宝塔PM2搭建RSSHub"></a>1.利用宝塔PM2搭建RSSHub</h2><ul>
<li><strong>RSSHub项目地址：</strong><a href="https://github.com/DIYgod/RSSHub" target="_blank" rel="noopener">DIYgod/RSSHub</a></li>
</ul>
<p>对于小白来说，宝塔面板的PM2管理器非常方便，使用云服务器建站用起来容易上手。</p>
<h3 id="1-1-clone源码到root目录下"><a href="#1-1-clone源码到root目录下" class="headerlink" title="1.1 clone源码到root目录下"></a>1.1 clone源码到root目录下</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;DIYgod&#x2F;RSSHub.git</span><br></pre></td></tr></table></figure>

<div class="note warning">
            <p>可能是因为RSSHub项目被墙的缘故，项目网页需要翻墙才可以打开，所以难免会出现clone速度很慢的同学，我们可以采用其他办法将源码下载出来，上传到root目录下，命名为RSSHub即可。<br>解决办法：</p><ul><li>使用代理下载速度快的同学可以直接将源码压缩包下载出来，解压并将RSSHub文件夹通过宝塔上传至root目录中</li><li>利用Gitee导入Github仓库功能，直接clone导入到Gitee仓库的RSSHub项目即可解决</li></ul>
          </div>

<h3 id="1-2-安装PM2管理器，启动RSSHub"><a href="#1-2-安装PM2管理器，启动RSSHub" class="headerlink" title="1.2 安装PM2管理器，启动RSSHub"></a>1.2 安装PM2管理器，启动RSSHub</h3><p>PM2管理器在宝塔面板软件商店中搜索找到并安装。</p>
<h4 id="启动RSSHub"><a href="#启动RSSHub" class="headerlink" title="启动RSSHub"></a>启动RSSHub</h4><ul>
<li><p><strong>命令行法添加项目</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd RSSHub</span><br><span class="line">pm2 start lib&#x2F;index.js --name rsshub</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>命令行添加法优点是添加项目速度快，但是在PM2中有可能会无法打开项目目录导致最终搭建失败</p>
</blockquote>
<ul>
<li><p><strong>PM2添加法</strong></p>
<img src="https://pic.downk.cc/item/5f3ad4a914195aa594bd99a3.png">

</li>
</ul>
<p>添加好后点击「映射」，设置域名，如图：</p>
<img src="https://pic.downk.cc/item/5f3ad5d614195aa594bdc6b5.png">

<div class="note warning">
            <ul><li>设置的域名可以到你的域名解析里添加一个子域名映射到服务器IP即可。子域名例如<code>rsshub.xxx.com</code>中的rsshub部分可随意设置</li><li>解析好子域名后顺便去申请个SSL证书，并在宝塔站点中开启子域名的SSL，如果不支持https会造成浏览器加载失败</li><li>必须映射到根目录RSSHub中，宝塔有可能会默认映射到www目录中，如果映射到www目录可能会导致覆盖Typecho网站的Nginx配置，从而使网站出现各种错误，这就是我主站崩溃的原因</li></ul>
          </div>
<p>最后在浏览器中打开<strong>你设置映射的域名(<code>https://rsshub.xxx.com</code>)</strong>看到RSSHub的图标并且显示<strong><code>Welcome to RSSHub!</code></strong>字样的页面说明搭建成功！</p>
<h3 id="2-利用宝塔Docker-部署RSSHub"><a href="#2-利用宝塔Docker-部署RSSHub" class="headerlink" title="2. 利用宝塔Docker 部署RSSHub"></a>2. 利用宝塔Docker 部署RSSHub</h3><div class="note info">
            <p>可参考<strong><a href="https://blog.dlzhang.com/" target="_blank" rel="noopener">班班</a></strong>的文章：</p><ul><li><a href="https://blog.dlzhang.com/posts/49/" target="_blank" rel="noopener">宝塔面板部署 RSSHub 和自动签到 Docker 应用</a></li></ul>
          </div>

<h3 id="3-跨域服务"><a href="#3-跨域服务" class="headerlink" title="3. 跨域服务"></a>3. 跨域服务</h3><p>跨域最简单的解决办法是：在原有的RSS源地址前面加上<code>https://cors-anywhere.herokuapp.com/</code></p>
<p>例如<code>https://cors-anywhere.herokuapp.com/https://rsshub.xxx.com/rss路由</code></p>
<p>但是这个方法访问速度比较慢，我这甚至出现了无法加载的情况，所以我们需要自己搭建一个跨域服务：</p>
<blockquote>
<p><a href="https://github.com/netnr/proxy" target="_blank" rel="noopener">proxy(HTTP请求代理，CORS跨域请求，HTTPS支持)</a></p>
</blockquote>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;netnr&#x2F;proxy.git</span><br><span class="line">cd proxy</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>如果clone不到使用，解决方法同上RSSHub，安装目录依旧是在根目录root下。</p>
<h4 id="PM2管理器添加项目"><a href="#PM2管理器添加项目" class="headerlink" title="PM2管理器添加项目"></a>PM2管理器添加项目</h4><p>添加项目同RSSHub的PM2添加法，启动文件为<strong>server.js</strong>，项目名称可随意。添加好后点击「映射」，设置域名。（这里域名需要再解析一个新的子域名并申请SSL证书，记得在宝塔添加证书开启SSL）</p>
<p>这时自己搭建的跨域服务为：<code>https://proxy.xxx.com/</code></p>
<p>此时自己的代理为：<code>https://proxy.xxx.com/https://rsshub.xxx.com/rss路由</code>，浏览器打开代理可以看到爬到的RSS源代码说明成功啦，同时可以发现自建跨域服务速度飞快（/赞）</p>
<h3 id="4-订阅RSS源"><a href="#4-订阅RSS源" class="headerlink" title="4. 订阅RSS源"></a>4. 订阅RSS源</h3><p>有了以上准备就可以订阅其他网站的RSS源啦，这里以B站为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户追番列表</span><br><span class="line">作者: @wdssmq</span><br><span class="line"></span><br><span class="line">举例: https:&#x2F;&#x2F;rsshub.app&#x2F;bilibili&#x2F;user&#x2F;bangumi&#x2F;208259</span><br><span class="line"></span><br><span class="line">路由: &#x2F;bilibili&#x2F;user&#x2F;bangumi&#x2F;:uid</span><br><span class="line"></span><br><span class="line">参数:</span><br><span class="line">uid, 必选 - 用户 id</span><br></pre></td></tr></table></figure>

<p>这时搭配上自建的两个服务后url就是：</p>
<p><code>https://proxy.xxx.com/https://rsshub.xxx.com/bilibili/user/bangumi/:uid</code></p>
<div class="note info">
            <ul><li>具体RSS源网站内容聚合在时光机页面内的配置可参见handsome文档</li><li>RSSHub具体的配置和路由可参见<a href="https://docs.rsshub.app/" target="_blank" rel="noopener">RSSHub文档</a>（RSSHub文档目前好像也被墙了）</li></ul>
          </div>

<blockquote>
<p>参考文章：</p>
<p><a href="https://www.anleenoxu.top/archives/156.html" target="_blank" rel="noopener">https://www.anleenoxu.top/archives/156.html</a><br><a href="https://www.jellyw.com/archives/170/" target="_blank" rel="noopener">https://www.jellyw.com/archives/170/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>Typecho</category>
      </categories>
      <tags>
        <tag>Typecho</tag>
        <tag>RSSHub</tag>
      </tags>
  </entry>
  <entry>
    <title>【Pi】VNC远程连接树莓派和WiFi模块的开启</title>
    <url>/undefined/66fbe44e.html</url>
    <content><![CDATA[<h2 id="前-言"><a href="#前-言" class="headerlink" title="前 言"></a>前 言</h2><p>前段时间在腾讯云买了台云服务器，随后又开始了解到树莓派也可以用来搭建服务器，毕竟作为技术型学生，对技术的学习总有着探索和热情之心。所以入手了一块树莓派4B（2G），打算用来搭建属于自己的服务器，同时开启了Linux学习之路(ง •̀_•́)ง……</p>
<p>今天记录一下成功用VNC进行远程连接还有成功用上WiFi功能！Ｏ(≧▽≦)Ｏ </p>
<img src="https://pic.downk.cc/item/5f27f04714195aa594f0fd43.jpg" style="zoom: 10%;" alt="正在使用的4B">

<a id="more"></a>

<h2 id="VNC远程连接"><a href="#VNC远程连接" class="headerlink" title="VNC远程连接"></a>VNC远程连接</h2><p>树莓派4B自带VNC，我们不需要再使用指令安装</p>
<ul>
<li><p>前期需要：</p>
<ul>
<li><p>树莓派的IP地址：给树莓派插上网线，在同一个内网（局域网）下，可以登录路由器管理界面查看树莓派的IP。</p>
</li>
<li><p>使用SSH远程树莓派（可以通过XShell、PuTTY或者SSH远程指令）</p>
<p><a href="https://www.cncrk.com/downinfo/236592.html" target="_blank" rel="noopener">XShell6下载 v6.0.0086 64位破解版</a>：下载地址里面用普通下载地址下载即可，高速下载器通道会附有垃圾软件。</p>
<p>SSH远程指令：<code>ssh pi@树莓派的IP地址</code></p>
</li>
<li><p>在自己的电脑上安装VNC。VNC是一款远程桌面软件，支持Windows、Mac、iOS、Linux、树莓派操作系统，而且树莓派自带VNC，只需要远程打开它就好了。</p>
<img src="https://pic.downk.cc/item/5f30963914195aa5940609ca.jpg" style="zoom: 70%;">
</li>
</ul>
</li>
<li><p>接下来是远程配置树莓派，指令为</p>
<p><code>sudo raspi-config</code></p>
<p>在终端/运行中键入以上指令后的现象如下图所示，选择步骤：5 Interfacing Options → P3 VNC → 是 → 确定 →Finish。</p>
<img src="https://pic.downk.cc/item/5f27dd9a14195aa594ea1d80.png" style="zoom: 85%;">

<p>配置完成后树莓派上的VNC就可以使用了。</p>
<p>在终端中输入指令 <code>vncserver</code> 后，等待字符跑完……然后如下图看到的，结束后最后一行的IP就是我们需要的，他告诉我们树莓派桌面的IP地址为192.168.3.20，端口号为1，有了这个我们就可以通过自己的电脑上的VNC远程树莓派了。</p>
<img src="https://pic.downk.cc/item/5f27dfe614195aa594eb17a8.png" style="zoom: 85%;">

</li>
</ul>
<p>VNC远程树莓派操作和XShell远程操作相似就不在加以叙述。</p>
<p>其实还可以通过手机或平板（ios端）对树莓派进行远程，只要在App Store中下载VNC，进行远程操作后就可以实现啦。</p>
<h2 id="开启树莓派无线上网模式"><a href="#开启树莓派无线上网模式" class="headerlink" title="开启树莓派无线上网模式"></a>开启树莓派无线上网模式</h2><p>树莓派4B内置有WiFi模块，可以不用外接无线网卡实现WiFi上网功能，下面将简单写下WiFi模块的开启。</p>
<p>在程序烧录进SD卡完成后，在boot中新建 <code>wpa_supplicant.conf</code> 文件，并写入无线的相关配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">country&#x3D;CN</span><br><span class="line">ctrl_interface&#x3D;DIR&#x3D;&#x2F;var&#x2F;run&#x2F;wpa_supplicant GROUP&#x3D;netdev</span><br><span class="line">update_config&#x3D;1</span><br><span class="line">  </span><br><span class="line">network&#x3D;&#123;</span><br><span class="line">    ssid&#x3D;&quot;wi-fi name here&quot;</span><br><span class="line">    psk&#x3D;&quot;wi-fi password here&quot;</span><br><span class="line">    key_mgmt&#x3D;WPA-PSK</span><br><span class="line">    priority&#x3D;1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> WiFi 配置示例说明：</p>
<ul>
<li><strong>ssid:网络的ssid</strong></li>
<li><strong>psk:密码</strong></li>
<li><strong>priority:连接优先级，数字越大优先级越高（不可以是负数）</strong></li>
</ul>
<p>如果有两个就在下面多添加一个<code>network</code>的代码并标好优先级就可。</p>
<p>若SD卡已经插入树莓派中，但又想修改文件中的内容可以使用指令来完成，在终端中输入以下指令打开文件</p>
<p><code>sudo nano  /etc/wpa_supplicant/wpa_supplicant.conf</code></p>
<p>可以用vim或nano编辑，这里使用nano，nano编辑完后先按Ctrl+O再按Enter对修改内容进行保存，再按Ctrl+X退出回到原来的终端界面。</p>
<p>以上就是这次对树莓派这块小玩意做的小总结啦~</p>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>技术学习</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>博客颜色字体用法整理</title>
    <url>/undefined/66da368c.html</url>
    <content><![CDATA[<p>在写文章的时候为了让某些内容更醒目，除了想到<strong>加粗</strong>、<code>添加代码条</code>、引用内容…之外，还可以通过改变字体颜色来突显不同。当然啦，在博客美化中也常会在很多地方会用到颜色，而每种颜色都对应着相应的色号？咳咳不对，我想说的是十六进制值，但是颜色有好几百上千种，我们又记不得这么多代码，去搜查还会浪费很多宝贵时间，真的是脑壳疼……前两天看到的一篇相关内容的文章，在这里给自己整理一下以后就不用花太多时间去找了</p>
<img src="https://pic.downk.cc/item/5f42c7fd160a154a6797f062.jpg" style="zoom: 40%;">



<a id="more"></a>

<h3 id="1、代码示例"><a href="#1、代码示例" class="headerlink" title="1、代码示例"></a>1、代码示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在Hexo中：</span><br><span class="line">&lt;font color&#x3D;&quot;red&quot;&gt;这里是红色&lt;&#x2F;font&gt;</span><br><span class="line"></span><br><span class="line">在Typecho中：</span><br><span class="line">!!!</span><br><span class="line">&lt;font color&#x3D;&quot;red&quot;&gt;这里是红色&lt;&#x2F;font&gt;</span><br><span class="line">!!!</span><br></pre></td></tr></table></figure>

<p><strong>效果：</strong><br><font color="red">这里是红色</font></p>
<ul>
<li>在Hexo中不用输入!，否则会直接输出! ；在Typecho中需要!，否则无法显示颜色</li>
</ul>
<h3 id="2、HTML5-CSS3颜色十六进制值演示站"><a href="#2、HTML5-CSS3颜色十六进制值演示站" class="headerlink" title="2、HTML5 CSS3颜色十六进制值演示站"></a>2、HTML5 CSS3颜色十六进制值演示站</h3><p>DEMO演示站：<a href="http://colors.cchosts.cn/" target="_blank" rel="noopener">http://colors.cchosts.cn/</a></p>
<h3 id="3、color颜色代码大全："><a href="#3、color颜色代码大全：" class="headerlink" title="3、color颜色代码大全："></a>3、color颜色代码大全：</h3><table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">颜色名称</th>
<th align="center">对应代码</th>
<th align="center">序号</th>
<th align="center">颜色名称</th>
<th align="center">对应代码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">白颜色(<font color="#FFFFFF">例</font>)</td>
<td align="center">#FFFFFF</td>
<td align="center">11</td>
<td align="center">蓝紫色(<font color="#9F5F9F">例</font>)</td>
<td align="center">#9F5F9F</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">红颜色(<font color="#FF0000">例</font>)</td>
<td align="center">#FF0000</td>
<td align="center">12</td>
<td align="center">黄铜色(<font color="#B5A642">例</font>)</td>
<td align="center">#B5A642</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">绿颜色(<font color="#00FF00">例</font>)</td>
<td align="center">#00FF00</td>
<td align="center">13</td>
<td align="center">亮金色(<font color="#D9D919">例</font>)</td>
<td align="center">#D9D919</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">蓝颜色(<font color="#0000FF">例</font>)</td>
<td align="center">#0000FF</td>
<td align="center">14</td>
<td align="center">棕色(<font color="#A67D3D">例</font>)</td>
<td align="center">#A67D3D</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">牡丹红(<font color="#FF00FF">例</font>)</td>
<td align="center">#FF00FF</td>
<td align="center">15</td>
<td align="center">青铜色(<font color="#8C7853">例</font>)</td>
<td align="center">#8C7853</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">青颜色(<font color="#00FFFF">例</font>)</td>
<td align="center">#00FFFF</td>
<td align="center">16</td>
<td align="center">2号青铜色(<font color="#A67D3D">例</font>)</td>
<td align="center">#A67D3D</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">黄颜色(<font color="#FFFF00">例</font>)</td>
<td align="center">#FFFF00</td>
<td align="center">17</td>
<td align="center">士官服蓝色(<font color="#5F9F9F">例</font>)</td>
<td align="center">#5F9F9F</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">黑颜色(<font color="#000000">例</font>)</td>
<td align="center">#000000</td>
<td align="center">18</td>
<td align="center">冷铜色(<font color="#98719">例</font>)</td>
<td align="center">#D98719</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">海颜蓝(<font color="#70DB93">例</font>)</td>
<td align="center">#70DB93</td>
<td align="center">19</td>
<td align="center">铜色(<font color="#B87333">例</font>)</td>
<td align="center">#B87333</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">巧克力色(<font color="#5C3317">例</font>)</td>
<td align="center">#5C3317</td>
<td align="center">20</td>
<td align="center">珊瑚红(<font color="#BFF7F00">例</font>)</td>
<td align="center">#FF7F00</td>
</tr>
</tbody></table>
<hr>
<p>例色工程量有点大，后面暂时不添加例色</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">颜色名称</th>
<th align="center">对应代码</th>
<th align="center">序号</th>
<th align="center">颜色名称</th>
<th align="center">对应代码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">21</td>
<td align="center">紫蓝色</td>
<td align="center">#42426F</td>
<td align="center">31</td>
<td align="center">深绿松石色</td>
<td align="center">#7093DB</td>
</tr>
<tr>
<td align="center">22</td>
<td align="center">深棕</td>
<td align="center">#5C4033</td>
<td align="center">32</td>
<td align="center">暗木色</td>
<td align="center">#855E42</td>
</tr>
<tr>
<td align="center">23</td>
<td align="center">深绿</td>
<td align="center">#2F4F2F</td>
<td align="center">33</td>
<td align="center">淡灰色</td>
<td align="center">#545454</td>
</tr>
<tr>
<td align="center">24</td>
<td align="center">深铜绿色</td>
<td align="center">#4A766E</td>
<td align="center">34</td>
<td align="center">土灰玫瑰红色</td>
<td align="center">#856363</td>
</tr>
<tr>
<td align="center">25</td>
<td align="center">深橄榄绿</td>
<td align="center">#4F4F2F</td>
<td align="center">35</td>
<td align="center">长石色</td>
<td align="center">#D19275</td>
</tr>
<tr>
<td align="center">26</td>
<td align="center">深兰花色</td>
<td align="center">#9932CD</td>
<td align="center">36</td>
<td align="center">火砖色</td>
<td align="center">#8E2323</td>
</tr>
<tr>
<td align="center">27</td>
<td align="center">深紫色</td>
<td align="center">#871F78</td>
<td align="center">37</td>
<td align="center">森林绿</td>
<td align="center">#238E23</td>
</tr>
<tr>
<td align="center">28</td>
<td align="center">深石板蓝</td>
<td align="center">#6B238E</td>
<td align="center">38</td>
<td align="center">金色</td>
<td align="center">#CD7F32</td>
</tr>
<tr>
<td align="center">29</td>
<td align="center">深铅灰色</td>
<td align="center">#2F4F4F</td>
<td align="center">39</td>
<td align="center">鲜黄色</td>
<td align="center">#DBDB7</td>
</tr>
<tr>
<td align="center">30</td>
<td align="center">深棕褐色</td>
<td align="center">#97694F</td>
<td align="center">40</td>
<td align="center">浅木色</td>
<td align="center">#E9C2A6</td>
</tr>
</tbody></table>
<hr>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">颜色名称</th>
<th align="center">对应代码</th>
<th align="center">序号</th>
<th align="center">颜色名称</th>
<th align="center">对应代码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">41</td>
<td align="center">石灰绿色</td>
<td align="center">#32CD32</td>
<td align="center">51</td>
<td align="center">中春绿色</td>
<td align="center">#7FFF00</td>
</tr>
<tr>
<td align="center">42</td>
<td align="center">桔黄色</td>
<td align="center">#E47833</td>
<td align="center">52</td>
<td align="center">中绿松石色</td>
<td align="center">#70DBDB</td>
</tr>
<tr>
<td align="center">43</td>
<td align="center">褐红色</td>
<td align="center">#8E236B</td>
<td align="center">53</td>
<td align="center">中紫红色</td>
<td align="center">#DB7093</td>
</tr>
<tr>
<td align="center">44</td>
<td align="center">中海蓝色</td>
<td align="center">#32CD99</td>
<td align="center">54</td>
<td align="center">中木色</td>
<td align="center">#A68064</td>
</tr>
<tr>
<td align="center">45</td>
<td align="center">中蓝色</td>
<td align="center">#3232CD</td>
<td align="center">55</td>
<td align="center">深藏青色</td>
<td align="center">#2F2F4F</td>
</tr>
<tr>
<td align="center">46</td>
<td align="center">中森林绿</td>
<td align="center">#6B8E23</td>
<td align="center">56</td>
<td align="center">海军蓝</td>
<td align="center">#23238E</td>
</tr>
<tr>
<td align="center">47</td>
<td align="center">中鲜黄色</td>
<td align="center">#EAEAAE</td>
<td align="center">57</td>
<td align="center">霓虹篮</td>
<td align="center">#4D4DFF</td>
</tr>
<tr>
<td align="center">48</td>
<td align="center">中兰花色</td>
<td align="center">#9370DB</td>
<td align="center">58</td>
<td align="center">霓虹粉红</td>
<td align="center">#FF6EC7</td>
</tr>
<tr>
<td align="center">49</td>
<td align="center">中海绿色</td>
<td align="center">#426F42</td>
<td align="center">59</td>
<td align="center">新深藏青色</td>
<td align="center">#00009C</td>
</tr>
<tr>
<td align="center">50</td>
<td align="center">中石板蓝色</td>
<td align="center">#7F00FF</td>
<td align="center">60</td>
<td align="center">新棕褐色</td>
<td align="center">#EBC79E</td>
</tr>
</tbody></table>
<hr>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">颜色名称</th>
<th align="center">对应代码</th>
<th align="center">序号</th>
<th align="center">颜色名称</th>
<th align="center">对应代码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">61</td>
<td align="center">暗金黄色</td>
<td align="center">#CFB53B</td>
<td align="center">71</td>
<td align="center">猩红色</td>
<td align="center">#BC1717</td>
</tr>
<tr>
<td align="center">62</td>
<td align="center">橙色</td>
<td align="center">#FF7F00</td>
<td align="center">72</td>
<td align="center">海绿色</td>
<td align="center">#238E68</td>
</tr>
<tr>
<td align="center">63</td>
<td align="center">橙红色</td>
<td align="center">#FF2400</td>
<td align="center">73</td>
<td align="center">半甜巧克力色</td>
<td align="center">#6B4226</td>
</tr>
<tr>
<td align="center">64</td>
<td align="center">淡紫色</td>
<td align="center">#DB70DB</td>
<td align="center">74</td>
<td align="center">赭色</td>
<td align="center">#8E6B23</td>
</tr>
<tr>
<td align="center">65</td>
<td align="center">浅绿色</td>
<td align="center">#8FBC8F</td>
<td align="center">75</td>
<td align="center">银色</td>
<td align="center">#E6E8FA</td>
</tr>
<tr>
<td align="center">66</td>
<td align="center">粉红色</td>
<td align="center">#BC8F8F</td>
<td align="center">76</td>
<td align="center">天蓝</td>
<td align="center">#3299CC</td>
</tr>
<tr>
<td align="center">67</td>
<td align="center">李子色</td>
<td align="center">#EAADEA</td>
<td align="center">77</td>
<td align="center">石板蓝</td>
<td align="center">#007FFF</td>
</tr>
<tr>
<td align="center">68</td>
<td align="center">石英色</td>
<td align="center">#D9D9F3</td>
<td align="center">78</td>
<td align="center">艳粉红色</td>
<td align="center">#FF1CAE</td>
</tr>
<tr>
<td align="center">69</td>
<td align="center">艳蓝色</td>
<td align="center">#5959AB</td>
<td align="center">79</td>
<td align="center">春绿色</td>
<td align="center">#00FF7F</td>
</tr>
<tr>
<td align="center">70</td>
<td align="center">鲑鱼色</td>
<td align="center">#6F4242</td>
<td align="center">80</td>
<td align="center">钢蓝色</td>
<td align="center">#236B8E</td>
</tr>
</tbody></table>
<hr>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">颜色名称</th>
<th align="center">对应代码</th>
<th align="center">序号</th>
<th align="center">颜色名称</th>
<th align="center">对应代码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">81</td>
<td align="center">亮天蓝色</td>
<td align="center">#38B0DE</td>
<td align="center">86</td>
<td align="center">淡浅灰色</td>
<td align="center">#CDCDCD</td>
</tr>
<tr>
<td align="center">82</td>
<td align="center">棕褐色</td>
<td align="center">#DB9370</td>
<td align="center">87</td>
<td align="center">紫罗兰色</td>
<td align="center">#4F2F4F</td>
</tr>
<tr>
<td align="center">83</td>
<td align="center">紫红色</td>
<td align="center">#D8BFD8</td>
<td align="center">88</td>
<td align="center">紫罗兰红色</td>
<td align="center">#CC3299</td>
</tr>
<tr>
<td align="center">84</td>
<td align="center">石板蓝色</td>
<td align="center">#ADEAEA</td>
<td align="center">89</td>
<td align="center">麦黄色</td>
<td align="center">#D8D8BF</td>
</tr>
<tr>
<td align="center">85</td>
<td align="center">浓深棕色</td>
<td align="center">#5C4033</td>
<td align="center">90</td>
<td align="center">黄绿色</td>
<td align="center">#99CC</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【单片机】（一）4个按钮8盏灯，实现四种功能</title>
    <url>/undefined/ec01d655.html</url>
    <content><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>文章主要分享本人的单片机学习过程，包含：课题、代码、程序仿真以及个人向的理解和推荐（不够专业，望理解）。希望能够对大家有帮助。</p>
<h2 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h2><p><strong>P1接8个灯，P3.2、 P3.3、 P3.4、P3.5接4个按钮，</strong><br><strong>按下P3.2 P1的8个灯奇亮偶不亮；</strong><br><strong>按下P3.3 P1的8个灯偶量奇不亮；</strong><br><strong>按下P3.4 P1的8个灯流水灯顺着滚动遍；</strong><br><strong>按下P3.5 P1的8个灯流水灯倒着滚动一遍。</strong></p>
<p><strong>编写程序实现以上功能。</strong></p>
<a id="more"></a>

<ol>
<li><p>首先根据题目发现使用到的I/O端口为P1和P3，注意8个灯接P1.0-1.7,4个按钮接P3.2-3.5。灯的问题由十六进制代码实现。</p>
</li>
<li><p>代码实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;reg51.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> time)</span><span class="comment">//延时函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span> i,j;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;time;i++)</span><br><span class="line"> <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span> y;</span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span> a[<span class="number">8</span>]=&#123;<span class="number">0xfe</span>,<span class="number">0xfd</span>,<span class="number">0xfb</span>,<span class="number">0xf7</span>,<span class="number">0xef</span>,<span class="number">0xdf</span>,<span class="number">0xbf</span>,<span class="number">0x7f</span>&#125;;<span class="comment">//流水灯P1口的值</span></span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span> b[<span class="number">8</span>]=&#123;<span class="number">0x7f</span>,<span class="number">0xbf</span>,<span class="number">0xdf</span>,<span class="number">0xef</span>,<span class="number">0xf7</span>,<span class="number">0xfb</span>,<span class="number">0xfd</span>,<span class="number">0xfe</span>&#125;;</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">if</span>(P3==<span class="number">0xfb</span>)   <span class="comment">//按下P3.2 P1的8个灯奇亮偶不亮</span></span><br><span class="line">    P1=<span class="number">0xaa</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(P3==<span class="number">0xf7</span>)   <span class="comment">//按下P3.3 P1的8个灯偶亮奇不亮</span></span><br><span class="line">  	P1=<span class="number">0x55</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(P3==<span class="number">0xef</span>)    <span class="comment">//按下P3.4 P1的8个灯流水灯顺着滚动一遍</span></span><br><span class="line">  	 <span class="keyword">for</span>(y=<span class="number">0</span>;y&lt;<span class="number">8</span>;y++)</span><br><span class="line">         &#123;</span><br><span class="line">          P1=a[y];</span><br><span class="line">          <span class="built_in">delay</span>(<span class="number">20</span>);</span><br><span class="line">         &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(P3==<span class="number">0xdf</span>)    <span class="comment">//按下P3.5 P1的8个灯流水灯逆着滚动一遍</span></span><br><span class="line">		<span class="keyword">for</span>(y=<span class="number">0</span>;y&lt;<span class="number">8</span>;y++)</span><br><span class="line">         &#123;</span><br><span class="line">          P1=b[y];</span><br><span class="line">          <span class="built_in">delay</span>(<span class="number">20</span>);</span><br><span class="line">         &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  P1=<span class="number">0xff</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>p.s<!--单词注释：postscript-->：此程序还可以进一步简化，关于P3.5可以使用for语句逆循环a数组里的数据，但是要注意的是需要将变量y的无符号型限制去掉才可以使用，否则会出现错误。</p>
</li>
<li><p>仿真演示：</p>
<p><img src="https://pic.downk.cc/item/5f3a9d9914195aa594b204d2.gif" alt></p>
</li>
</ol>
<p><strong>小结</strong></p>
<p>了解I/O端口以及对应的十六进制代码表示；熟悉C语言if-else和for语句，延时函数。</p>
<h2 id="使用到的软件"><a href="#使用到的软件" class="headerlink" title="使用到的软件"></a>使用到的软件</h2><ol>
<li><p><strong>代码编辑器/IDE</strong>：主要用来写C语言的代码，我比较喜欢用的是Notepad++和VS Code。这两个编写和浏览代码比较舒服，学校让我们装的是VC6.0。简单介绍一下我用过的：</p>
<ul>
<li>VC6.0：比较老了，初学者用一下可以，但是不推荐未来使用。我的使用感受是启动慢，字体小，没有编辑辅助功能，有的错误它不会提示，要自己去找。总的来说就是不够智能吧。</li>
<li>Notepad++：优秀的代码编辑器，支持超过50种编程、脚本和标记语言的语法高亮显示，代码可折叠方便查阅整个文档。轻量化的感觉，开启迅速，编写和浏览很舒服。</li>
<li>VS Code：第一次接触它是从搭建博客开始的，之前都是使用Notepad++，至于VC6.0？？？除了刚学C的时候用过，之后再没打开过。同样也是轻量级体验，支持几乎所有主流的开发语言的语法高亮和智能代码补全等。如果需要看大量代码的话这个是很推荐的，看着比较舒服；如果是单片机初学阶段，写的代码不多，个人推荐Notepad++就够了。</li>
<li>SUBLIME TEXT：这款也是因为搭建博客而接触到的编辑器。有付费内容，但是使用免费的不影响体验也没有时间限制，使用感受和VS Code差不多，同样拥有高亮显示和编辑辅助功能。和VS Code看起来我觉得SUBLIME TEXT的代码显示要Q些，看起来比较可爱哈哈哈。</li>
<li>以上就是我使用过的编辑器的简单介绍了，如果想了解得更细致些可以到google和baidu查。我们还学习了Java SE，当时使用的IDE是eclipse，由于这里主要介绍本人单片机课程的内容，代码是用C语言写的，所以就不对eclipse进行介绍了。</li>
</ul>
</li>
<li><p><strong>Keil 3</strong>：用来对代码进行编译和生成.HEX文件。</p>
<ul>
<li><a href="[https://baike.baidu.com/item/hex%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F](https://baike.baidu.com/item/hex文件格式)">hex文件格式</a>是可以烧写到单片机中，被单片机执行的一种文件格式。生成hex文件的方式有很多种，可以通过不同的编译器将C程序或者汇编程序编译生成hex,这里用的是Keil。</li>
</ul>
</li>
<li><p><strong>Proteus</strong>：EDA工具仿真软件，用来仿真单片机等器件。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>物联网课程</category>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>【单片机】（二）实验一升级，进阶+复习！</title>
    <url>/undefined/6e490410.html</url>
    <content><![CDATA[<h2 id="1-前情提要"><a href="#1-前情提要" class="headerlink" title="1. 前情提要"></a>1. 前情提要</h2><p>通过 <strong><a href="/undefined/ec01d655.html" title="实验一">实验一</a></strong> 我们知道，单片机（以AT89C51为例）I/O端口需要通过对应的十六进制代码来使用，通过编程每一个按钮实现的功能都不一样。嘿嘿，这期我们升级一下，通过按下两个按钮来实现他们的功能  ─=≡Σ((( つ•̀ω•́)つ Let’s go!</p>
<a id="more"></a>

<h2 id="2-实验题目"><a href="#2-实验题目" class="headerlink" title="2. 实验题目"></a>2. 实验题目</h2><p><strong>P1接8个灯，P3.2、P3.3、P3.4、P3.5接4个按钮</strong>（以实验一为基础）</p>
<p><strong>选择其中两个开关，完成按下一个开关流水灯顺着循环滚动不停，按下另一个，流水灯逆着滚动不停</strong> </p>
<p>（本次实验仅实现题目功能，其他功能观众有兴趣的话可以继续造 o(￣▽￣)o 捏嘿）</p>
<h3 id="2-1-代码实现"><a href="#2-1-代码实现" class="headerlink" title="2.1 代码实现"></a>2.1 代码实现</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;reg51.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> time)</span> <span class="comment">//延时函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;time;i++)</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">		;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span> y,m,n;</span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span> a[<span class="number">8</span>]=&#123;<span class="number">0xfe</span>,<span class="number">0xfd</span>,<span class="number">0xfb</span>,<span class="number">0xf7</span>,<span class="number">0xef</span>,<span class="number">0xdf</span>,<span class="number">0xbf</span>,<span class="number">0x7f</span>&#125;;</span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span> b[<span class="number">8</span>]=&#123;<span class="number">0x7f</span>,<span class="number">0xbf</span>,<span class="number">0xdf</span>,<span class="number">0xef</span>,<span class="number">0xf7</span>,<span class="number">0xfb</span>,<span class="number">0xfd</span>,<span class="number">0xfe</span>&#125;; <span class="comment">//a、b为顺逆流值</span></span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span> c[<span class="number">4</span>]=&#123;<span class="number">0xfb</span>,<span class="number">0xf7</span>,<span class="number">0xef</span>,<span class="number">0xdf</span>&#125;; <span class="comment">//只按一个按钮的值</span></span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span> d[<span class="number">6</span>]=&#123;<span class="number">0xf3</span>,<span class="number">0xeb</span>,<span class="number">0xdb</span>,<span class="number">0xe7</span>,<span class="number">0xd7</span>,<span class="number">0xcf</span>&#125;;  <span class="comment">//按两个按钮时的值</span></span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line">	 <span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;<span class="number">4</span>;m++) <span class="comment">//当只按一个按钮时顺流</span></span><br><span class="line">	 &#123;</span><br><span class="line">		<span class="keyword">if</span>(P3==c[m])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(y=<span class="number">0</span>;y&lt;<span class="number">8</span>;y++)</span><br><span class="line">			 &#123;</span><br><span class="line">			  P1=a[y];</span><br><span class="line">			  <span class="built_in">delay</span>(<span class="number">20</span>);</span><br><span class="line">			 &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		P1=<span class="number">0xff</span>;	</span><br><span class="line">	 &#125;</span><br><span class="line">	 <span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">6</span>;n++) <span class="comment">//当按下两个按钮时逆流</span></span><br><span class="line">	 &#123;</span><br><span class="line">		 <span class="keyword">if</span>(P3==d[n])</span><br><span class="line">		 &#123;</span><br><span class="line">			<span class="keyword">for</span>(y=<span class="number">0</span>;y&lt;<span class="number">8</span>;y++)</span><br><span class="line">			 &#123;</span><br><span class="line">			  P1=b[y];</span><br><span class="line">			  <span class="built_in">delay</span>(<span class="number">20</span>);</span><br><span class="line">			 &#125;</span><br><span class="line">		 &#125;</span><br><span class="line">		 <span class="keyword">else</span></span><br><span class="line">		 P1=<span class="number">0xff</span>;</span><br><span class="line">	 &#125;</span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p><strong>心得体会：</strong></p>
<p>因为刚接触这门课，萌新的我花了很长时间才将题目功能实现出来QAQ。当时编写出现的问题是①按下按钮都无法实现功能和②按下一个按钮流水灯能发生顺流而按下第二个按钮或相隔的按钮时无法进行逆流，所以我认为可以从②中寻找为何按下第二个按钮或相隔按钮时无法逆流的问题。</p>
<p>当时和好友一起讨论的时候我注意到了他的一句话 <strong>“按两个按钮就是1111 0011，也就是0xf3了 ”</strong> ，因为这句话我得到了灵感，那就是把任意两个按钮同时按下时的十六进制值写数组中，这样就像只按一个按钮的数组一样。当然，顺逆流的循环可以优化一下省去一部分代码，而且我在网上找过很多方法，可能在选择按钮中会有更简便的写法。</p>
<h3 id="2-2-仿真演示"><a href="#2-2-仿真演示" class="headerlink" title="2.2 仿真演示"></a>2.2 仿真演示</h3><blockquote>
<p><em>本代码可以实现按下<strong>任意两个</strong>开关流水灯都可以进行逆流。</em></p>
</blockquote>
<ul>
<li><p>按下一个开关时：（这里以按下P3.3开关为例）</p>
<p><img src="https://pic.downk.cc/item/5f3a9dbe14195aa594b20d40.gif" alt></p>
</li>
<li><p>按下两个开关时：</p>
<p>如按下P3.3和P3.5开关：（相隔按钮）</p>
<p><img src="https://pic.downk.cc/item/5f3a9dd514195aa594b2143e.gif" alt></p>
<p>如按下P3.4和P3.5开关：（相邻按钮）</p>
<p><img src="https://pic.downk.cc/item/5f3a9de614195aa594b219ed.gif" alt></p>
</li>
</ul>
<h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h2><p>这次实验对于实验一来说是一次升格，因为通过双开关这一步更加加深了对I/O端口的了解和运用，是流水灯实验中一道不错的综合题。</p>
]]></content>
      <categories>
        <category>物联网课程</category>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/undefined/d95d7e09.html</url>
    <content><![CDATA[<h2 id="关于第一篇博客"><a href="#关于第一篇博客" class="headerlink" title="关于第一篇博客"></a>关于第一篇博客</h2><p>关于我创建这个博客的目的在关于一栏里有简单介绍，接下来这篇文章主要是写一下在我搭建博客过程中的心得吧。</p>
<p>首先本站是我搭建的第三个Hexo博客网站，那另外两个呢？另外两个因为操作过于萌新不满意搭建效果都删掉重来了QAQ。其实这第三个网站我费尽了千辛万苦才成功搭建起来，因为有前两个网站的搭建历史，导致我重新建第三个网站的时候经常出现克隆失败的情况，我当时都懵了，以为我不能再建Hexo博客了，不断地去查找资料寻找解决方案，最后终于在这条 <strong>强制清除缓存</strong> 指令<code>npm cache clean --force</code> 下让我重新成功搭建起Hexo博客，所以搭建不易，大家要好好爱惜自己辛苦搭建起来的博客网站啊。</p>
<p><img src="https://pic.downk.cc/item/5f3a9d7014195aa594b1fa04.png" alt="出错时的图片"></p>
<a id="more"></a>

<p>因为我的专业主要在嵌入式开发方向，只接触过C，Java和汇编语言，对JS和网页方面的知识不太了解，所以在搭建和完善本站的过程中出现了很多问题，比如主题、插入图片等问题，经常要花一部分时间去查找解决方案才能解决。在这里不得不说一下，真心想搭建好一个博客是需要花时间下功夫去摸索的，因为没有接触过JS和前端方面的知识做这个更是艰难，我只能尽自己所能把自己的博客做到自己满意的效果。</p>
<h2 id="Hexo博客搭建教程视频推荐"><a href="#Hexo博客搭建教程视频推荐" class="headerlink" title="Hexo博客搭建教程视频推荐"></a>Hexo博客搭建教程视频推荐</h2><p>首先我搭建的Hexo博客是参考了以下教程视频的，在这里可以给大家分享一下：</p>
<ul>
<li><p>使用Mac或者Linux来搭建的话，推荐 <a href="https://space.bilibili.com/384068749/" target="_blank" rel="noopener"><strong>CodeSheep</strong></a> 羊哥的视频， 传送门：<a href="https://www.bilibili.com/video/BV1Yb411a7ty" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Yb411a7ty</a></p>
</li>
<li><p>使用windows搭建的话，我是看了<a href="https://space.bilibili.com/100518197/" target="_blank" rel="noopener"><strong>Master_lisa</strong></a>小姐姐的视频，每一步都特别详细（声音也很好听 /滑稽），传送门：<a href="https://www.bilibili.com/video/BV1A4411G7SF" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1A4411G7SF</a></p>
</li>
</ul>
<h2 id="聊一聊"><a href="#聊一聊" class="headerlink" title="聊一聊"></a>聊一聊</h2><h4 id="关于我的博客的发展"><a href="#关于我的博客的发展" class="headerlink" title="关于我的博客的发展"></a>关于我的博客的发展</h4><ul>
<li><p>会写一下关于现在专业知识学习时遇到的问题，可能会写一下学习过程中的心得吧。</p>
</li>
<li><p>有时间的话会写一下关于Hexo和Hugo博客搭建时遇到的问题，可能会有点教程内容，当然教程部分会用别人的来做参考，我会放出参考链接。</p>
</li>
<li><p>还有什么的话我会后续更新的…</p>
</li>
</ul>
<h4 id="我在Hexo和Hugo之间的选择"><a href="#我在Hexo和Hugo之间的选择" class="headerlink" title="我在Hexo和Hugo之间的选择"></a>我在Hexo和Hugo之间的选择</h4><p>大家都知道Hexo是基于Nodejs，Hugo是基于Go语言编写的。Hexo和Hugo之间各有优缺点，Hexo优点在于使用的人多，主题和插件多，正因如此，Hexo可以做很多美化工作，出现问题的话网上的解决方案会比较多，问题容易解决。但是它有个缺点，就是当文章数多了之后生成静态的速度会很慢，这个问题其实挺难受的。</p>
<p>而Hugo恰恰相反，主题和插件没有Hexo多，相应的教程就比较少。当然如果博客主要用途是用在写文章上，对主题美化要求不是特别高的话，这个问题是可以忽略不计的。其次，Hugo最大的优点就是生成静态的速度非常快，可能Hexo需要几分钟，而Hugo只需要几秒钟。</p>
<p>对于Hexo和Hugo之间的选择因人而异，在正式运用博客上我是想选择Hugo的，但是现在使用的是Hexo，这是因为一开始我接触到的教程是Hexo的，发现使用的人比较多我就也跟着做了，还有一点就是我对博客搭建方面的知识还不够充足，常常出现很多问题，查找解决方案的时候很方便。我也搭有一个Hugo的博客，本来是打算用它的，但是在主题方面出现了很多问题，去查问题也没查出来，所以只能先用着Hexo了。因为做博客确实花费了大量时间，后期有时间我慢慢去摸索吧。</p>
<h4 id="搭建个人博客的好处"><a href="#搭建个人博客的好处" class="headerlink" title="搭建个人博客的好处"></a>搭建个人博客的好处</h4><p>想必学习计算机方向的同学都知道搭建个人博客对未来找工作面试的时候会有很大的加分。还有我觉得可以对自己学习的知识进行总结和记录，方便今后的复习。在搭建博客的过程中查找问题解决方案时肯定会接触到别人的博客，别人的博客里面或许会有那么一两篇对你有用的干货，同时还可以接触到你没接触过的知识，不断拓展自己的知识层，俗话说：“技多不压身”，多了解一点或许在某个时候会对自己有帮助哦。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>第一篇写得太多了…… 今后我会不断完善这个博客的，接下来就请期待我不定期的更新吧哈哈哈</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>踩坑记录</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
